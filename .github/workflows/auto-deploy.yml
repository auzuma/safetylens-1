name: Auto Deploy SafetyLens

on:
  push:
    branches:
      - main
      - development
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Set environment based on branch
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Prepare artifact
        run: |
          mkdir dist
          cp -r src/ dist/
          cp package*.json dist/
          cp tsconfig.json dist/
          cp nodemon.json dist/
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
          
      - name: Start server and run health check
        env:
          PORT: ${{ github.ref == 'refs/heads/main' && '9000' || '9001' }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          # Add any other environment variables your app needs
        run: |
          # Modify server.ts to listen on all interfaces
          sed -i 's/app\.listen(PORT as number,\s*"localhost"/app.listen(PORT as number, "0.0.0.0"/' src/server.ts || echo "Server binding already configured"
          
          echo "Starting server on port ${PORT}..."
          
          # Start server and wait for it to be ready
          npm run start:server &
          SERVER_PID=$!
          
          echo "Server process started with PID ${SERVER_PID}"
          
          # Wait for server to start (up to 30 seconds)
          for i in {1..30}; do
            if curl -s "http://localhost:${PORT}/health" > /dev/null; then
              echo "Server is up and running!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Server failed to start within 30 seconds"
              cat server.log || true
              exit 1
            fi
            echo "Attempt $i: Waiting for server to start..."
            sleep 1
          done
          
          # Keep the server running in background
          disown ${SERVER_PID} 